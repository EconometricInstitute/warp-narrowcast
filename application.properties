
###################################################################
# Database configuration to connect to a WARP PostgreSQL Database #
###################################################################

#spring.jpa.database=POSTGRESQL
#spring.datasource.platform=postgres
#spring.jpa.hibernate.ddl-auto=none
#spring.database.driverClassName=org.postgresql.Driver
#spring.datasource.url=jdbc:postgresql://localhost:5432/warp
#spring.datasource.username=warp
#spring.datasource.password=mypassword

# For demonstration purposes, the mock profile is used.
spring.profiles.active=api,mock
# To make use of an actual WARP database, the mock profile should not be activated.

# To enable application log-files, the following settings can be used.
#logging.file.path=logs
#server.tomcat.basedir=.

# Access logs of the webserver can be enabled using the following settings.
#server.tomcat.accesslog.enabled=true
#server.tomcat.accesslog.directory=logs/access

# It is possible to control the logging level of different packages/controllers
logging.level.nl.eur.ese.ei.warp.narrowcast=DEBUG

# Since WARP does not work with timezones, it is possible to define the timezones used in the database
# and within this application. Times are converted according to these settings.
application.warp.narrowcast.applicationTimezone=Europe/Amsterdam
application.warp.narrowcast.databaseTimezone=UTC

# The embedded tomcat can be configured as well. In our deployment, our reverse proxy forwards includes
# the application on the same domain as the WARP application itself, but serves this application under the
# /narrowcast path. The settings below are relevant for this type of reverse-proxy configuration

#server.port=8090
#server.servlet.context-path=/narrowcast
#server.use-forward-headers=true


